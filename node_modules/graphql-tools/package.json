{
  "_from": "graphql-tools@2.3.0",
  "_id": "graphql-tools@2.3.0",
  "_inBundle": false,
  "_integrity": "sha512-QcZyFFjOp6W82gQ1BrJ47N+ZRuDi0+JxaJkRvT4mzDkSfWaHzWRFTF5OOI1EYlnI/x3PS1qSs12EBcjLBb9j4Q==",
  "_location": "/graphql-tools",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "graphql-tools",
    "fetchSpec": "2.3.0",
    "name": "graphql-tools",
    "raw": "graphql-tools@2.3.0",
    "rawSpec": "2.3.0",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-tools/-/graphql-tools-2.3.0.tgz",
  "_shasum": "91109b4a1d5df378ecdeba6eb76b2d672e20f427",
  "_spec": "graphql-tools@2.3.0",
  "_where": "D:\\GraphQL-node-api",
  "author": {
    "email": "jonas@helfer.email",
    "name": "Jonas Helfer"
  },
  "bugs": {
    "url": "https://github.com/apollostack/graphql-tools/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "apollo-link": "^0.7.0",
    "deprecated-decorator": "^0.1.6",
    "uuid": "^3.1.0"
  },
  "deprecated": false,
  "description": "Useful tools to create and manipulate GraphQL schemas.",
  "devDependencies": {
    "@types/bluebird": "^3.5.12",
    "@types/chai": "4.0.4",
    "@types/graphql": "^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0",
    "@types/mocha": "^2.2.43",
    "@types/node": "^8.0.31",
    "@types/request": "2.0.3",
    "@types/request-promise": "^4.1.38",
    "@types/uuid": "^3.4.2",
    "body-parser": "^1.18.2",
    "chai": "^4.1.2",
    "express": "^4.16.1",
    "graphql": "^0.11.6",
    "graphql-subscriptions": "^0.5.3",
    "graphql-type-json": "^0.1.4",
    "istanbul": "^0.4.5",
    "iterall": "^1.1.3",
    "mocha": "^3.5.3",
    "prettier": "^1.7.3",
    "remap-istanbul": "0.9.5",
    "request": "^2.83.0",
    "request-promise": "^4.2.2",
    "rimraf": "^2.6.2",
    "source-map-support": "^0.4.18",
    "tslint": "^5.7.0",
    "typescript": "2.5.3"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/apollostack/graphql-tools#readme",
  "keywords": [
    "Apollo",
    "GraphQL",
    "JavaScript",
    "Mock",
    "Schema",
    "Schema Language",
    "Tools",
    "TypeScript"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "graphql-tools",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": "^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0"
  },
  "readme": "# GraphQL-tools: generate and mock GraphQL.js schemas\n\n[![npm version](https://badge.fury.io/js/graphql-tools.svg)](https://badge.fury.io/js/graphql-tools)\n[![Build Status](https://travis-ci.org/apollographql/graphql-tools.svg?branch=master)](https://travis-ci.org/apollographql/graphql-tools)\n[![Coverage Status](https://coveralls.io/repos/github/apollographql/graphql-tools/badge.svg?branch=master)](https://coveralls.io/github/apollographql/graphql-tools?branch=master)\n[![Get on Slack](https://img.shields.io/badge/slack-join-orange.svg)](http://www.apollostack.com/#slack)\n\nThis package provides a few useful ways to create a GraphQL schema:\n\n1. Use the GraphQL schema language to [generate a schema](http://dev.apollodata.com/tools/graphql-tools/generate-schema.html) with full support for resolvers, interfaces, unions, and custom scalars. The schema produced is completely compatible with [GraphQL.js](https://github.com/graphql/graphql-js).\n2. [Mock your GraphQL API](http://dev.apollodata.com/tools/graphql-tools/mocking.html) with fine-grained per-type mocking\n3. Automatically [stitch multiple schemas together](http://dev.apollodata.com/tools/graphql-tools/schema-stitching.html) into one larger API\n\n## Documentation\n\n[Read the docs.](http://dev.apollodata.com/tools/graphql-tools/index.html)\n\n## Example\n\n[See and edit the live example on Launchpad.](https://launchpad.graphql.com/1jzxrj179)\n\nWhen using `graphql-tools`, you describe the schema as a GraphQL type language string:\n\n```js\n\nconst typeDefs = `\ntype Author {\n  id: ID! # the ! means that every author object _must_ have an id\n  firstName: String\n  lastName: String\n  posts: [Post] # the list of Posts by this author\n}\n\ntype Post {\n  id: ID!\n  title: String\n  author: Author\n  votes: Int\n}\n\n# the schema allows the following query:\ntype Query {\n  posts: [Post]\n}\n\n# this schema allows the following mutation:\ntype Mutation {\n  upvotePost (\n    postId: ID!\n  ): Post\n}\n\n# we need to tell the server which types represent the root query\n# and root mutation types. We call them RootQuery and RootMutation by convention.\nschema {\n  query: Query\n  mutation: Mutation\n}\n`;\n\nexport default typeDefs;\n```\n\nThen you define resolvers as a nested object that maps type and field names to resolver functions:\n\n```js\nconst resolvers = {\n  Query: {\n    posts() {\n      return posts;\n    },\n  },\n  Mutation: {\n    upvotePost(_, { postId }) {\n      const post = find(posts, { id: postId });\n      if (!post) {\n        throw new Error(`Couldn't find post with id ${postId}`);\n      }\n      post.votes += 1;\n      return post;\n    },\n  },\n  Author: {\n    posts(author) {\n      return filter(posts, { authorId: author.id });\n    },\n  },\n  Post: {\n    author(post) {\n      return find(authors, { id: post.authorId });\n    },\n  },\n};\n\nexport default resolvers;\n```\n\nAt the end, the schema and resolvers are combined using `makeExecutableSchema`:\n\n```js\nimport { makeExecutableSchema } from 'graphql-tools';\n\nconst executableSchema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n```\n\nThis example has the entire type definition in one string and all resolvers in one file, but you can combine types and resolvers from multiple files and objects, as documented in the [modularizing the schema](http://dev.apollodata.com/tools/graphql-tools/generate-schema.html#modularizing) section of the docs.\n\n## Contributions\n\nContributions, issues and feature requests are very welcome. If you are using this package and fixed a bug for yourself, please consider submitting a PR!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollostack/graphql-tools.git"
  },
  "scripts": {
    "clean": "rimraf dist",
    "compile": "tsc",
    "coverage": "istanbul cover _mocha -- --reporter dot --full-trace ./dist/test/tests.js",
    "lint": "tslint $(find src | grep ts$)",
    "postcoverage": "remap-istanbul --input coverage/coverage.json --type lcovonly --output coverage/lcov.info",
    "posttest": "npm run lint",
    "prepublish": "npm run compile",
    "prerelease": "npm test",
    "pretest": "npm run clean && npm run compile",
    "prettier": "prettier --trailing-comma all --single-quote --write 'src/**/*.ts'",
    "release": "standard-version",
    "test": "npm run testonly --",
    "testonly": "mocha --reporter spec --full-trace ./dist/test/tests.js",
    "typings": "typings install",
    "watch": "tsc -w"
  },
  "typescript": {
    "definition": "dist/index.d.ts"
  },
  "typings": "dist/index.d.ts",
  "version": "2.3.0"
}
